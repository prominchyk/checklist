{"ast":null,"code":"var _jsxFileName = \"C:\\\\projects\\\\checklist\\\\src\\\\components\\\\Calendar.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport CalendarPresent from \"./CalendarPresent\";\nimport { nanoid } from 'nanoid';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Calendar() {\n  _s();\n  const now = new Date();\n  const [year, setYear] = useState(now.getFullYear());\n  const [month, setMonth] = useState(now.getMonth());\n  const [date, setDate] = useState(now.getDate());\n  const [day, setDay] = useState(now.getDay());\n  const lastDate = new Date(year, month + 1, 0);\n  const lastDay = lastDate.getDate();\n  const [cellsAmount, setCellsAmount] = useState(day + lastDay);\n  const [cellsArr, setCellsArr] = useState([]);\n  cellsAmount % 7 !== 0 && setCellsAmount(cellsAmount + 1);\n  function createCellsArr() {\n    const copy = [...cellsArr];\n    for (let i = cellsAmount; i >= 1; i--) {\n      copy.push({\n        id: nanoid(),\n        value: '',\n        hasTasks: false,\n        allTasksDone: false\n      });\n    }\n    setCellsArr(copy);\n    console.log(cellsArr);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(CalendarPresent, {\n      year: year,\n      month: month,\n      lastDay: lastDay,\n      day: day,\n      cellsAmount: cellsAmount\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: createCellsArr()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 33,\n    columnNumber: 12\n  }, this);\n}\n_s(Calendar, \"M9Ns5G4HOuFcvNgG7iUXwH53SZs=\");\n_c = Calendar;\nexport default Calendar;\nvar _c;\n$RefreshReg$(_c, \"Calendar\");","map":{"version":3,"names":["React","useState","CalendarPresent","nanoid","jsxDEV","_jsxDEV","Calendar","_s","now","Date","year","setYear","getFullYear","month","setMonth","getMonth","date","setDate","getDate","day","setDay","getDay","lastDate","lastDay","cellsAmount","setCellsAmount","cellsArr","setCellsArr","createCellsArr","copy","i","push","id","value","hasTasks","allTasksDone","console","log","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/projects/checklist/src/components/Calendar.js"],"sourcesContent":["import React, {useState} from \"react\";\r\nimport CalendarPresent from \"./CalendarPresent\";\r\nimport {nanoid} from 'nanoid';\r\n\r\nfunction Calendar() {\r\n    const now = new Date();\r\n    const [year, setYear] = useState(now.getFullYear());\r\n    const [month, setMonth] = useState(now.getMonth());\r\n    const [date, setDate] = useState(now.getDate());\r\n    const [day, setDay] = useState(now.getDay());\r\n    const lastDate = new Date(year, month + 1, 0);\r\n    const lastDay = lastDate.getDate();\r\n    const [cellsAmount, setCellsAmount] = useState(day + lastDay);\r\n    const [cellsArr, setCellsArr] = useState([]);\r\n\r\n    cellsAmount % 7 !== 0 && setCellsAmount(cellsAmount + 1);\r\n   \r\n    function createCellsArr() {\r\n        const copy = [...cellsArr];\r\n        for(let i = cellsAmount; i >= 1; i--) {\r\n            copy.push({\r\n                id: nanoid(),\r\n                value: '',\r\n                hasTasks: false,\r\n                allTasksDone: false,\r\n            })\r\n        }\r\n        setCellsArr(copy);\r\n        console.log(cellsArr);\r\n    }\r\n\r\n\r\n    return <div>\r\n        <CalendarPresent year = {year} month = {month} lastDay = {lastDay} day = {day} cellsAmount = {cellsAmount} />\r\n        <p>{createCellsArr()}</p>\r\n    </div>\r\n\r\n}\r\n\r\nexport default Calendar;"],"mappings":";;AAAA,OAAOA,KAAK,IAAGC,QAAQ,QAAO,OAAO;AACrC,OAAOC,eAAe,MAAM,mBAAmB;AAC/C,SAAQC,MAAM,QAAO,QAAQ;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE9B,SAASC,QAAQA,CAAA,EAAG;EAAAC,EAAA;EAChB,MAAMC,GAAG,GAAG,IAAIC,IAAI,CAAC,CAAC;EACtB,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGV,QAAQ,CAACO,GAAG,CAACI,WAAW,CAAC,CAAC,CAAC;EACnD,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGb,QAAQ,CAACO,GAAG,CAACO,QAAQ,CAAC,CAAC,CAAC;EAClD,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGhB,QAAQ,CAACO,GAAG,CAACU,OAAO,CAAC,CAAC,CAAC;EAC/C,MAAM,CAACC,GAAG,EAAEC,MAAM,CAAC,GAAGnB,QAAQ,CAACO,GAAG,CAACa,MAAM,CAAC,CAAC,CAAC;EAC5C,MAAMC,QAAQ,GAAG,IAAIb,IAAI,CAACC,IAAI,EAAEG,KAAK,GAAG,CAAC,EAAE,CAAC,CAAC;EAC7C,MAAMU,OAAO,GAAGD,QAAQ,CAACJ,OAAO,CAAC,CAAC;EAClC,MAAM,CAACM,WAAW,EAAEC,cAAc,CAAC,GAAGxB,QAAQ,CAACkB,GAAG,GAAGI,OAAO,CAAC;EAC7D,MAAM,CAACG,QAAQ,EAAEC,WAAW,CAAC,GAAG1B,QAAQ,CAAC,EAAE,CAAC;EAE5CuB,WAAW,GAAG,CAAC,KAAK,CAAC,IAAIC,cAAc,CAACD,WAAW,GAAG,CAAC,CAAC;EAExD,SAASI,cAAcA,CAAA,EAAG;IACtB,MAAMC,IAAI,GAAG,CAAC,GAAGH,QAAQ,CAAC;IAC1B,KAAI,IAAII,CAAC,GAAGN,WAAW,EAAEM,CAAC,IAAI,CAAC,EAAEA,CAAC,EAAE,EAAE;MAClCD,IAAI,CAACE,IAAI,CAAC;QACNC,EAAE,EAAE7B,MAAM,CAAC,CAAC;QACZ8B,KAAK,EAAE,EAAE;QACTC,QAAQ,EAAE,KAAK;QACfC,YAAY,EAAE;MAClB,CAAC,CAAC;IACN;IACAR,WAAW,CAACE,IAAI,CAAC;IACjBO,OAAO,CAACC,GAAG,CAACX,QAAQ,CAAC;EACzB;EAGA,oBAAOrB,OAAA;IAAAiC,QAAA,gBACHjC,OAAA,CAACH,eAAe;MAACQ,IAAI,EAAIA,IAAK;MAACG,KAAK,EAAIA,KAAM;MAACU,OAAO,EAAIA,OAAQ;MAACJ,GAAG,EAAIA,GAAI;MAACK,WAAW,EAAIA;IAAY;MAAAe,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eAC7GrC,OAAA;MAAAiC,QAAA,EAAIV,cAAc,CAAC;IAAC;MAAAW,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACxB,CAAC;AAEV;AAACnC,EAAA,CAjCQD,QAAQ;AAAAqC,EAAA,GAARrC,QAAQ;AAmCjB,eAAeA,QAAQ;AAAC,IAAAqC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}