{"ast":null,"code":"var _jsxFileName = \"C:\\\\projects\\\\checklist\\\\src\\\\components\\\\Calendar.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport CalendarPresent from \"./CalendarPresent\";\nimport { nanoid } from 'nanoid';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Calendar() {\n  _s();\n  const now = new Date();\n  const [year, setYear] = useState(now.getFullYear());\n  const [month, setMonth] = useState(now.getMonth());\n  const [date, setDate] = useState(now.getDate());\n  const [day, setDay] = useState(now.getDay());\n  const [cellsArr, setCellsArr] = useState([]);\n  const lastDate = new Date(year, month + 1, 0);\n  const lastDay = lastDate.getDate();\n  function getCellsAmount() {\n    let res = day + lastDay;\n    while (res % 7 !== 0) {\n      res += 1;\n    }\n    return res;\n  }\n  function createCellsArr() {\n    const copy = [...cellsArr];\n    for (let i = 1; i <= getCellsAmount(); i++) {\n      copy.push({\n        id: nanoid(),\n        value: '',\n        hasTasks: false,\n        tasksDone: false\n      });\n    }\n    setCellsArr(copy);\n    console.log(cellsArr);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(CalendarPresent, {\n      year: year,\n      month: month,\n      cellsAmount: getCellsAmount,\n      lastDay: lastDay,\n      createCellsArr: createCellsArr\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 39,\n    columnNumber: 12\n  }, this);\n}\n_s(Calendar, \"xoRKZrl+JL09i2hcpxfHBSwqE3M=\");\n_c = Calendar;\nexport default Calendar;\nvar _c;\n$RefreshReg$(_c, \"Calendar\");","map":{"version":3,"names":["React","useState","CalendarPresent","nanoid","jsxDEV","_jsxDEV","Calendar","_s","now","Date","year","setYear","getFullYear","month","setMonth","getMonth","date","setDate","getDate","day","setDay","getDay","cellsArr","setCellsArr","lastDate","lastDay","getCellsAmount","res","createCellsArr","copy","i","push","id","value","hasTasks","tasksDone","console","log","children","cellsAmount","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/projects/checklist/src/components/Calendar.js"],"sourcesContent":["import React, {useState} from \"react\";\r\nimport CalendarPresent from \"./CalendarPresent\";\r\nimport {nanoid} from 'nanoid';\r\n\r\nfunction Calendar() {\r\n    const now = new Date();\r\n    const [year, setYear] = useState(now.getFullYear());\r\n    const [month, setMonth] = useState(now.getMonth());\r\n    const [date, setDate] = useState(now.getDate());\r\n    const [day, setDay] = useState(now.getDay());\r\n    const [cellsArr, setCellsArr] = useState([]);\r\n    const lastDate = new Date(year, month + 1, 0);\r\n    const lastDay = lastDate.getDate();\r\n    \r\n    function getCellsAmount() {\r\n        let res = day + lastDay;\r\n        while(res % 7 !== 0) {\r\n            res += 1;\r\n        }\r\n        return res;  \r\n    }\r\n\r\n    function createCellsArr() {\r\n        const copy = [...cellsArr];\r\n        for(let i = 1; i <= getCellsAmount(); i++) {\r\n            copy.push({\r\n                id: nanoid(),\r\n                value: '',\r\n                hasTasks: false, \r\n                tasksDone: false,\r\n            })\r\n        }\r\n        setCellsArr(copy);\r\n        console.log(cellsArr);\r\n    }\r\n\r\n\r\n\r\n    return <div>\r\n        <CalendarPresent year = {year} month = {month} cellsAmount = {getCellsAmount} lastDay = {lastDay} createCellsArr={createCellsArr} />\r\n    </div>\r\n\r\n}\r\n\r\nexport default Calendar;"],"mappings":";;AAAA,OAAOA,KAAK,IAAGC,QAAQ,QAAO,OAAO;AACrC,OAAOC,eAAe,MAAM,mBAAmB;AAC/C,SAAQC,MAAM,QAAO,QAAQ;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE9B,SAASC,QAAQA,CAAA,EAAG;EAAAC,EAAA;EAChB,MAAMC,GAAG,GAAG,IAAIC,IAAI,CAAC,CAAC;EACtB,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGV,QAAQ,CAACO,GAAG,CAACI,WAAW,CAAC,CAAC,CAAC;EACnD,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGb,QAAQ,CAACO,GAAG,CAACO,QAAQ,CAAC,CAAC,CAAC;EAClD,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGhB,QAAQ,CAACO,GAAG,CAACU,OAAO,CAAC,CAAC,CAAC;EAC/C,MAAM,CAACC,GAAG,EAAEC,MAAM,CAAC,GAAGnB,QAAQ,CAACO,GAAG,CAACa,MAAM,CAAC,CAAC,CAAC;EAC5C,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGtB,QAAQ,CAAC,EAAE,CAAC;EAC5C,MAAMuB,QAAQ,GAAG,IAAIf,IAAI,CAACC,IAAI,EAAEG,KAAK,GAAG,CAAC,EAAE,CAAC,CAAC;EAC7C,MAAMY,OAAO,GAAGD,QAAQ,CAACN,OAAO,CAAC,CAAC;EAElC,SAASQ,cAAcA,CAAA,EAAG;IACtB,IAAIC,GAAG,GAAGR,GAAG,GAAGM,OAAO;IACvB,OAAME,GAAG,GAAG,CAAC,KAAK,CAAC,EAAE;MACjBA,GAAG,IAAI,CAAC;IACZ;IACA,OAAOA,GAAG;EACd;EAEA,SAASC,cAAcA,CAAA,EAAG;IACtB,MAAMC,IAAI,GAAG,CAAC,GAAGP,QAAQ,CAAC;IAC1B,KAAI,IAAIQ,CAAC,GAAG,CAAC,EAAEA,CAAC,IAAIJ,cAAc,CAAC,CAAC,EAAEI,CAAC,EAAE,EAAE;MACvCD,IAAI,CAACE,IAAI,CAAC;QACNC,EAAE,EAAE7B,MAAM,CAAC,CAAC;QACZ8B,KAAK,EAAE,EAAE;QACTC,QAAQ,EAAE,KAAK;QACfC,SAAS,EAAE;MACf,CAAC,CAAC;IACN;IACAZ,WAAW,CAACM,IAAI,CAAC;IACjBO,OAAO,CAACC,GAAG,CAACf,QAAQ,CAAC;EACzB;EAIA,oBAAOjB,OAAA;IAAAiC,QAAA,eACHjC,OAAA,CAACH,eAAe;MAACQ,IAAI,EAAIA,IAAK;MAACG,KAAK,EAAIA,KAAM;MAAC0B,WAAW,EAAIb,cAAe;MAACD,OAAO,EAAIA,OAAQ;MAACG,cAAc,EAAEA;IAAe;MAAAY,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACnI,CAAC;AAEV;AAACpC,EAAA,CAtCQD,QAAQ;AAAAsC,EAAA,GAARtC,QAAQ;AAwCjB,eAAeA,QAAQ;AAAC,IAAAsC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}